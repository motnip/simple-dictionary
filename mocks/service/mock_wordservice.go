// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motnip/sermo/service (interfaces: WordService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/motnip/sermo/model"
)

// MockWordService is a mock of WordService interface.
type MockWordService struct {
	ctrl     *gomock.Controller
	recorder *MockWordServiceMockRecorder
}

// MockWordServiceMockRecorder is the mock recorder for MockWordService.
type MockWordServiceMockRecorder struct {
	mock *MockWordService
}

// NewMockWordService creates a new mock instance.
func NewMockWordService(ctrl *gomock.Controller) *MockWordService {
	mock := &MockWordService{ctrl: ctrl}
	mock.recorder = &MockWordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordService) EXPECT() *MockWordServiceMockRecorder {
	return m.recorder
}

// ListWords mocks base method.
func (m *MockWordService) ListWords() ([]*model.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWords")
	ret0, _ := ret[0].([]*model.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWords indicates an expected call of ListWords.
func (mr *MockWordServiceMockRecorder) ListWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWords", reflect.TypeOf((*MockWordService)(nil).ListWords))
}

// SaveWord mocks base method.
func (m *MockWordService) SaveWord(arg0 *model.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWord indicates an expected call of SaveWord.
func (mr *MockWordServiceMockRecorder) SaveWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWord", reflect.TypeOf((*MockWordService)(nil).SaveWord), arg0)
}
