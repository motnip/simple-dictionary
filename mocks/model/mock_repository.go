// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motnip/sermo/model (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/motnip/sermo/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddWord mocks base method.
func (m *MockRepository) AddWord(arg0 *model.Word) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *MockRepositoryMockRecorder) AddWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*MockRepository)(nil).AddWord), arg0)
}

// CreateDictionary mocks base method.
func (m *MockRepository) CreateDictionary(arg0 string) (*model.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDictionary", arg0)
	ret0, _ := ret[0].(*model.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDictionary indicates an expected call of CreateDictionary.
func (mr *MockRepositoryMockRecorder) CreateDictionary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDictionary", reflect.TypeOf((*MockRepository)(nil).CreateDictionary), arg0)
}

// DeleteDictionary mocks base method.
func (m *MockRepository) DeleteDictionary() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDictionary")
}

// DeleteDictionary indicates an expected call of DeleteDictionary.
func (mr *MockRepositoryMockRecorder) DeleteDictionary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDictionary", reflect.TypeOf((*MockRepository)(nil).DeleteDictionary))
}

// ExistsDictionary mocks base method.
func (m *MockRepository) ExistsDictionary() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsDictionary")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsDictionary indicates an expected call of ExistsDictionary.
func (mr *MockRepositoryMockRecorder) ExistsDictionary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsDictionary", reflect.TypeOf((*MockRepository)(nil).ExistsDictionary))
}

// ListDictionary mocks base method.
func (m *MockRepository) ListDictionary() []*model.Dictionary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDictionary")
	ret0, _ := ret[0].([]*model.Dictionary)
	return ret0
}

// ListDictionary indicates an expected call of ListDictionary.
func (mr *MockRepositoryMockRecorder) ListDictionary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDictionary", reflect.TypeOf((*MockRepository)(nil).ListDictionary))
}

// ListWords mocks base method.
func (m *MockRepository) ListWords() ([]*model.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWords")
	ret0, _ := ret[0].([]*model.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWords indicates an expected call of ListWords.
func (mr *MockRepositoryMockRecorder) ListWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWords", reflect.TypeOf((*MockRepository)(nil).ListWords))
}
